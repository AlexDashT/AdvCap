@page "/"
@using AdvCap.Client.Components
@inject ConfigService ConfigService
@inject StateService StateService
@inject IJSRuntime JSRuntime

@implements IDisposable

<div class="container mt-4">
    <div class="text-center mb-4">
        <img src="assets/logo.webp" alt="Logo" class="logo-image" />
        <h1 class="d-inline-block ms-2">Adventure Cryptoist</h1>
        <h1 class="d-inline-block ms-2">@StateService.Wallet.MoneyString</h1>
    </div>

    @if (activeTab == "Home")
    {
        <div class="row">
            @foreach (var businessID in ConfigService.GetBusinessIDs())
            {
                <div class="col-12 mb-3">
                    <BusinessCell BusinessID="@businessID" />
                </div>
            }
        </div>
    }
    else if (activeTab == "Managers")
    {
        <Managers />
    }
    else if (activeTab == "Upgrades")
    {
        <Upgrades />
    }
    else if (activeTab == "Settings")
    {
        <Settings />
    }

    <BottomNav OnTabChange="HandleTabChange" />
    <OfflineEarningsPopup OnCollect="@HandleCollectEarnings" />
</div>

@code {
    private string activeTab = "Home";
    private bool initialized = false;

    protected override async Task OnInitializedAsync()
    {
        await StateService.InitializeAsync();
        await StateService.HandleAppStartAsync();
        await JSRuntime.InvokeVoidAsync("eval", "window.addEventListener('beforeunload', function(event) { DotNet.invokeMethodAsync('AdvCap.Client', 'SaveStateOnExit'); });");
        StateService.OnChange += StateHasChanged;
    }

    private void HandleTabChange(string tab)
    {
        Console.WriteLine($"activeTab changed to: {activeTab}"); // Log to console
        activeTab = tab;
        StateHasChanged(); // Ensure the component re-renders
    }

    private async Task HandleCollectEarnings()
    {
        await StateService.CollectOfflineEarningsAsync();
        StateHasChanged();
    }

    public void Dispose()
    {
        StateService.OnChange -= StateHasChanged;
        StateService.SaveStateAsync().GetAwaiter().GetResult();
    }
}
